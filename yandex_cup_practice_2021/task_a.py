"""
https://contest.yandex.ru/yacup/contest/29250/problems/A/

A. Робот-секретарь (разминка)
    Ограничение времени	    1 секунда
    Ограничение памяти	    256Mb
    Ввод	                стандартный ввод или input.txt
    Вывод	                стандартный вывод или output.txt

Решение, проходящее все тесты, будет оценено в 2 балла.

Настя любит программировать и увлекается старой компьютерной техникой. Однажды она увидела в музее Яндекса робота для
набора текста на печатной машинке. Настя захотела проверить, насколько оптимально работает робот.
Клавиатура печатной машинки состоит из 26 клавиш английского алфавита, клавиши пробела и клавиши Shift, которая изменяет
регистр следующей набранной буквы на противоположный текущему. Двойное же нажатие на клавишу Shift изменяет текущий
регистр машинки. В начале работы регистр всегда нижний, то есть при наборе без клавиши Shift будут печататься строчные
буквы. Пробел одинаково набирается в обоих регистрах.

Настя хочет понять, за какое минимальное количество нажатий можно набрать текст, чтобы сравнить это с результатами
робота.

Это разминочная задача, к которой мы размещаем готовое решения, чтобы вы могли познакомиться с нашей автоматической
системой проверки решений. Ввод и вывод осуществляется через файлы, либо через стандартные потоки ввода-вывода,
как вам удобнее.

Пример решения на С++: https://pastebin.com/gUv33Cd9. В качестве компилятора выбирайте GNU C++ 14 4.9.

Формат ввода
Входные данные – строка
s (1 ≤ |s| ≤ 100000), состоящая из прописных и строчных букв английского алфавита, а также символа пробела.

Формат вывода
Выведите единственное число — минимальное количество нажатий, необходимое, чтобы напечатать данную строку.

Пример 1
Ввод	        Вывод
Hello World     13

Пример 2
Ввод	        Вывод
APPLE II        10
"""


def solution(s):
    def get_reg(c):
        if 'a' <= c <= 'z':
            return 'small'
        elif 'A' <= c <= 'Z':
            return 'big'
        else:
            return 'space'

    taps = 0
    reg = 'small'
    for i, c in enumerate(s):
        c_reg = get_reg(c)
        if c_reg != reg and c_reg != 'space':
            n_reg = get_reg(s[i+1]) if (i + 1) < len(s) else reg
            if n_reg == c_reg:
                reg = c_reg
                taps += 2
            else:
                taps += 1
        taps += 1
    return taps


def solution2(s):
    small = [0] * (len(s) + 1)
    big = [0] * (len(s) + 1)
    if 'a' <= s[0] <= 'z':
        small[0] = 0
    else:
        big[0] = 2

    for i in range(len(s)):
        if 'a' <= s[i] <= 'z':
            small[i+1] = min(small[i] + 1, big[i] + 3)
            big[i+1] = min(small[i] + 3, big[i] + 2)
        elif 'A' <= s[i] <= 'Z':
            small[i+1] = min(big[i] + 3, small[i] + 2)
            big[i+1] = min(big[i] + 1, small[i] + 3)
        else:
            big[i+1] = big[i] + 1
            small[i+1] = small[i] + 1

    print('-----------')
    print(small)
    print(big)

    return min(small[-1], big[-1])


# with open('input.txt') as f:
#     in_str = f.read()
#
# res = solution(in_str)
# print(res)
#
# with open('output.txt', 'w+') as f:
#     f.write(str(res))

print(solution2('Hello World'))
print(solution2('APPLE II'))
print(solution2('A'))
print(solution2(' A'))
